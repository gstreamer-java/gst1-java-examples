
import java.nio.ByteBuffer;

import org.freedesktop.gstreamer.Buffer;
import org.freedesktop.gstreamer.Sample;
import org.freedesktop.gstreamer.Structure;
import org.freedesktop.gstreamer.elements.AppSink;


import javafx.scene.image.Image;
import javafx.scene.image.PixelFormat;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;


public class AppSinkListener implements AppSink.NEW_SAMPLE {
	
	Image actualFrame;
	int i = 0;
	int lastWidth = 0;
	int lastHeigth = 0;
	byte[] byteArray;
	public ObjectProperty<Image> frame = new SimpleObjectProperty<Image>(actualFrame);
	private ImageContainer imageContainer = new ImageContainer();
	
	@Override
	public void newBuffer(AppSink appSink) {
		Sample sample = appSink.pullSample();
		Structure capsStruct = sample.getCaps().getStructure(0);
        Buffer buffer = sample.getBuffer();
        ByteBuffer byteBuffer = buffer.map(false);
        if (byteBuffer != null){
            int width = capsStruct.getInteger("width");
            int height = capsStruct.getInteger("height");
        	if (width != lastWidth || height != lastHeigth){
        		lastWidth = width;
        		lastHeigth = height;
        		byteArray = new byte[width * height * 4];
        	}

	        byteBuffer.get(byteArray);
	        actualFrame = convertBytesToImage(byteArray, width, height);
	        frame = new SimpleObjectProperty<Image>(actualFrame);
	        imageContainer.setImage(actualFrame);
	        buffer.unmap();
	        }
        sample.dispose();
	}
	
	public ImageContainer getImageContainer(){
		return imageContainer;
	}

	private Image convertBytesToImage(byte[] pixels, int width, int height){
		WritableImage img = new WritableImage(width, height);
		PixelWriter pw = img.getPixelWriter();
		pw.setPixels(0, 0, width, height, PixelFormat.getByteBgraInstance(), pixels, 0, width *4);
		return img;
	}
	
}
